execute[[Program: program -> definition*]]() =
    <call main>
    <halt>
    ' * Global Variables
    for (Definition def : definition*)
        if (def instanceof VarDefinition)
            execute[[def]]();

    for (Definition def : definition*)
        if (def instanceof FuncDefinition)
            execute[[def]]();

execute[[VarDefinition: vardefinition -> type ID]]() =
    ' * type ID (offset: vardefinition.offset)

execute[[FuncDefinition: funcdefinition -> type ID vardefinition* statement*]]() =
    ID:
    ' * Parameters
    execute[[type]]()
    ' * Local Variables
    vardefinition*.foreach(vardef -> execute[[vardef]]())
    if (vardefinition*.size() > 0)
        <enter> -vardefinition*.get(vardefinition.size() - 1).offset

    statement*.foreach(stmt -> execute[[stmt]]())

execute[[FunctionType: type -> type1 vardefinition*]]() =
    vardefinition*.foreach(vardef -> execute[[vardef]]())

execute[[Print: statement -> expression]]() =
    value[[expression]]()
    <out> expression.type.suffix()

execute[[Input: statement -> expression]]() =
    address[[expression]]()
    <in> expression.type.suffix()
    <store> expression.type.suffix()

execute[[Assignment: statement -> expression1 expression2]]() =
    address[[expression1]]
    value[[expression2]]
    <store> expression2.type.suffix()


execute[[WhileStatement: statement -> expression statement*]]() =
    int labels = cg.getLabels(2)
    int condition = labels + 1
    int end = labels + 2
    <label> condition <:>
    value[[expression]]()
    <jz label> end
    statement*.foreach(stmt -> execute[[stmt]]())
    <jump label> condition
    <label> end <:>

execute[[IfElseStatement: statement -> expression statement1* statement2*]]() =
    int labels = cg.getLabels(2)
    int else = labels + 1
    int end = labels + 2
    value[[expression]]()
    <jz label> else
    statement1*.foreach(stmt -> execute[[stmt]]())
    <jump label> end
    <label> else <:>
    statement2*.foreach(stmt -> execute[[stmt]]())
    <label> end <:>

execute[[Function: statement -> expression1 expression2*]]() =
    value[[(Expression)statement]]()
    if (!(Expression) statement.type instanceof VoidType))
        <pop> ((Expression) statement).type.suffix()

execute[[Return: statement -> expression]](funcdefinition) =
    value[[expression]]()
    <ret> funcdefinition.type.returnType.numberOfBytes() <,>
          funcdefinition.bytesLocalsSum() <,>
          funcdefinition.type.bytesParamsSum()

address[[Variable: expression -> ID]]() =
    if (expression.definition.scope==0)
        <pusha> expression.definition.offset
    else
        <push bp>
        <pushi> expression.definition.offset
        <addi>

address[[ArrayAccess: expression1 -> expression2 expression3]]() =
    address[[expression2]]()
    value[[expression3]]()
    <pushi> expression1.type.numberOfBytes()
    <muli>
    <addi>

address[[FieldAccess: expression1 -> expression2 ID]]() =
    address[[expression2]]()
    <pushi> expression2.type.getField(expression1.fieldName).offset
    <addi>

value[[Variable: expression -> ID]]() =
    address[[expression]]()
    <load> expression.type.suffix()

value[[IntLiteral: expression -> INT_CONSTANT]]() =
    <pushi> INT_CONSTANT

value[[DoubleLiteral: expression -> REAL_CONSTANT]]() =
    <pushf> REAL_CONSTANT

value[[CharLiteral: expression -> CHAR_CONSTANT]]() =
    <pushb> CHAR_CONSTANT

value[[Arithmetic: expression -> expression1 (+|-|*|/|%) expression2]]() =
    value[[expression1]]()
    value[[expression2]]()
    switch (expression.operator) {
        case "+":
            <add> expression.type.suffix()
            break;
        case "-":
            <sub> expression.type.suffix()
            break;
        case "*":
            <mul> expression.type.suffix()
            break;
        case "/":
            <div> expression.type.suffix()
            break;
        case "%":
            <mod> expression.type.suffix()
            break;
    }

value[[UnaryMinus: expression1 -> expression2]]() =
    <push> expression1.type.suffix() <0>
    value[[expression2]]()
    <sub> expression1.type.suffix()

value[[Comparison: expression -> expression1 (<|<=|==|>=|>|!=) expression2]]() =
    value[[expression1]]()
    value[[expression2]]()
    switch (expression.operator) {
        case "<":
            <lt> expression.type.suffix()
            break;
        case "<=":
            <le> expression.type.suffix()
            break;
        case "==":
            <eq> expression.type.suffix()
            break;
        case ">=":
            <ge> expression.type.suffix()
            break;
        case ">":
            <gt> expression.type.suffix()
            break;
        case "!=":
            <ne> expression.type.suffix()
            break;
    }

value[[LogicComparison: expression -> expression1 (&&|'||') expression2]]() =
    value[[expression1]]()
    value[[expression2]]()
    switch (expression.operator) {
        case "&&":
            <and>
            break;
        case "||":
            <or>
            break;
    }

value[[Not: expression -> expression1]]() =
    value[[expression1]]()
    <not>

value[[Cast: expression -> type expression1]]() =
    value[[expression1]]()
    expression1.type.suffix()<2>type.suffix()

value[[ArrayAccess: expression1 -> expression2 expression3]]() =
    address[[expression1]]()
    <load> expression.type.suffix()

value[[Access: expression1 -> expression2 expression3]]() =
    address[[expression1]]()
    <load> expression.type.suffix()

value[[Function: expression1 -> expression2 expression3*]]() =
    expression3*.foreach(exp -> value[[exp]]())
    <call> expression2.name